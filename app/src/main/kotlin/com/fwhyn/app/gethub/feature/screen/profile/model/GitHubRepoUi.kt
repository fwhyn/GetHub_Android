package com.fwhyn.app.gethub.feature.screen.profile.model

import com.fwhyn.app.gethub.feature.func.user.data.model.LicenseData

data class GitHubRepoUi(
    val id: Long,
    val name: String,
    val fullName: String,
    val htmlUrl: String,
    val description: String?,
    val url: String,
    val createdAt: String,
    val updatedAt: String,
    val pushedAt: String?,
    val homepage: String?,
    val size: Int,
    val stargazersCount: Int,
    val watchersCount: Int,
    val language: String?,
    val forksCount: Int,
    val archived: Boolean,
    val disabled: Boolean,
    val openIssuesCount: Int,
    val license: LicenseData?,
    val topics: List<String>,
    val visibility: String,
    val forks: Int,
    val openIssues: Int,
    val watchers: Int,
    val defaultBranch: String,
) {
    companion object {
        fun default(
            id: Long = 0L,
            name: String = "",
            fullName: String = "",
            htmlUrl: String = "",
            description: String? = null,
            url: String = "",
            createdAt: String = "",
            updatedAt: String = "",
            pushedAt: String? = "",
            homepage: String? = null,
            size: Int = 0,
            stargazersCount: Int = 0,
            watchersCount: Int = 0,
            language: String? = null,
            forksCount: Int = 0,
            archived: Boolean = false,
            disabled: Boolean = false,
            openIssuesCount: Int = 0,
            license: LicenseData? = null,
            topics: List<String> = emptyList(),
            visibility: String = "",
            forks: Int = 0,
            openIssues: Int = 0,
            watchers: Int = 0,
            defaultBranch: String = "",
        ): GitHubRepoUi {
            return GitHubRepoUi(
                id = id,
                name = name,
                fullName = fullName,
                htmlUrl = htmlUrl,
                description = description,
                url = url,
                createdAt = createdAt,
                updatedAt = updatedAt,
                pushedAt = pushedAt,
                homepage = homepage,
                size = size,
                stargazersCount = stargazersCount,
                watchersCount = watchersCount,
                language = language,
                forksCount = forksCount,
                archived = archived,
                disabled = disabled,
                openIssuesCount = openIssuesCount,
                license = license,
                topics = topics,
                visibility = visibility,
                forks = forks,
                openIssues = openIssues,
                watchers = watchers,
                defaultBranch = defaultBranch,
            )
        }
    }
}

val gitHubRepoUiFake = GitHubRepoUi(
    id = 123456789L,
    name = "example-repo",
    fullName = "fwhyn/example-repo",
    htmlUrl = "https://github.com/fwhyn/example-repo",
    description = "This is an example repository.",
    url = "https://api.github.com/repos/fwhyn/example-repo",
    createdAt = "2023-01-01T00:00:00Z",
    updatedAt = "2023-02-01T00:00:00Z",
    pushedAt = "2023-03-01T00:00:00Z",
    homepage = "https://example.com",
    size = 1024,
    stargazersCount = 150,
    watchersCount = 150,
    language = "Kotlin",
    forksCount = 10,
    archived = false,
    disabled = false,
    openIssuesCount = 5,
    license = LicenseData(
        key = "mit",
        name = "MIT License",
        spdxId = "MIT",
        url = "https://opensource.org/licenses/MIT",
        nodeId = "MDc6TGljZW5zZW1pdA=="
    ),
    topics = listOf("kotlin", "android", "example"),
    visibility = "public",
    forks = 10,
    openIssues = 5,
    watchers = 150,
    defaultBranch = "main"
)

val gitHubReposUiFake = listOf(
    gitHubRepoUiFake,
    GitHubRepoUi(
        id = 1L,
        name = "repo-one",
        fullName = "fwhyn/repo-one",
        htmlUrl = "https://github.com/fwhyn/repo-one",
        description = "This is the first example repository.",
        url = "https://api.github.com/repos/fwhyn/repo-one",
        createdAt = "2023-01-01T00:00:00Z",
        updatedAt = "2023-02-01T00:00:00Z",
        pushedAt = "2023-03-01T00:00:00Z",
        homepage = "https://example1.com",
        size = 512,
        stargazersCount = 100,
        watchersCount = 100,
        language = "Kotlin",
        forksCount = 5,
        archived = false,
        disabled = false,
        openIssuesCount = 2,
        license = LicenseData(
            key = "apache-2.0",
            name = "Apache License 2.0",
            spdxId = "Apache-2.0",
            url = "https://opensource.org/licenses/Apache-2.0",
            nodeId = "MDc6TGljZW5zZWFwYWNoZTI="
        ),
        topics = listOf("kotlin", "android", "example"),
        visibility = "public",
        forks = 5,
        openIssues = 2,
        watchers = 100,
        defaultBranch = "main"
    ),
    GitHubRepoUi(
        id = 2L,
        name = "repo-two",
        fullName = "fwhyn/repo-two",
        htmlUrl = "https://github.com/fwhyn/repo-two",
        description = "This is the second example repository.",
        url = "https://api.github.com/repos/fwhyn/repo-two",
        createdAt = "2023-04-01T00:00:00Z",
        updatedAt = "2023-05-01T00:00:00Z",
        pushedAt = "2023-06-01T00:00:00Z",
        homepage = "https://example2.com",
        size = 1024,
        stargazersCount = 200,
        watchersCount = 200,
        language = "Java",
        forksCount = 15,
        archived = false,
        disabled = false,
        openIssuesCount = 10,
        license = LicenseData(
            key = "mit",
            name = "MIT License",
            spdxId = "MIT",
            url = "https://opensource.org/licenses/MIT",
            nodeId = "MDc6TGljZW5zZW1pdA=="
        ),
        topics = listOf("java", "backend", "example"),
        visibility = "public",
        forks = 15,
        openIssues = 10,
        watchers = 200,
        defaultBranch = "main"
    )
)